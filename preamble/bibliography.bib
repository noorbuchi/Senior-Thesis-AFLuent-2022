@INPROCEEDINGS{Xuan2014Combine,  author={Xuan, Jifeng and Monperrus, Martin},  booktitle={2014 IEEE International Conference on Software Maintenance and Evolution},   title={Learning to Combine Multiple Ranking Metrics for Fault Localization},   year={2014},  volume={},  number={},  pages={191-200},  doi={10.1109/ICSME.2014.41}}

@article{Wong2014DStar,  author={Wong, W. Eric and Debroy, Vidroha and Gao, Ruizhi and Li, Yihao},  journal={IEEE Transactions on Reliability},   title={The DStar Method for Effective Software Fault Localization},   year={2014},  volume={63},  number={1},  pages={290-308},  doi={10.1109/TR.2013.2285319}}

@article{naish2011model,
  title={A model for spectra-based software diagnosis},
  author={Naish, Lee and Lee, Hua Jie and Ramamohanarao, Kotagiri},
  journal={ACM Transactions on software engineering and methodology (TOSEM)},
  volume={20},
  number={3},
  pages={1--32},
  year={2011},
  publisher={ACM New York, NY, USA}
}

@INPROCEEDINGS{Wang2011Search,  author={Shaowei Wang and Lo, David and Jiang, Lingxiao and Lucia and Lau, Hoong Chuin},  booktitle={2011 26th IEEE/ACM International Conference on Automated Software Engineering (ASE 2011)},   title={Search-based fault localization},   year={2011},  volume={},  number={},  pages={556-559},  doi={10.1109/ASE.2011.6100124}}

@INPROCEEDINGS{le2013theory,
  author={Le, Tien-Duy B. and Thung, Ferdian and Lo, David},
  booktitle={2013 IEEE International Conference on Software Maintenance}, 
  title={Theory and Practice, Do They Match? A Case with Spectrum-Based Fault Localization}, 
  year={2013},
  volume={},
  number={},
  pages={380-383},
  doi={10.1109/ICSM.2013.52}}

@article{ABREU20091780,
title = {A practical evaluation of spectrum-based fault localization},
journal = {Journal of Systems and Software},
volume = {82},
number = {11},
pages = {1780-1792},
year = {2009},
note = {SI: TAIC PART 2007 and MUTATION 2007},
issn = {0164-1212},
doi = {https://doi.org/10.1016/j.jss.2009.06.035},
url = {https://www.sciencedirect.com/science/article/pii/S0164121209001319},
author = {Rui Abreu and Peter Zoeteweij and Rob Golsteijn and Arjan J.C. {van Gemund}},
keywords = {Test data analysis, Software fault diagnosis, Program spectra, Real-time and embedded systems, Consumer electronics},
abstract = {Spectrum-based fault localization (SFL) shortens the test-diagnose-repair cycle by reducing the debugging effort. As a light-weight automated diagnosis technique it can easily be integrated with existing testing schemes. Since SFL is based on discovering statistical coincidences between system failures and the activity of the different parts of a system, its diagnostic accuracy is inherently limited. Using a common benchmark consisting of the Siemens set and the space program, we investigate this diagnostic accuracy as a function of several parameters (such as quality and quantity of the program spectra collected during the execution of the system), some of which directly relate to test design. Our results indicate that the superior performance of a particular similarity coefficient, used to analyze the program spectra, is largely independent of test design. Furthermore, near-optimal diagnostic accuracy (exonerating over 80% of the blocks of code on average) is already obtained for low-quality error observations and limited numbers of test cases. In addition to establishing these results in the controlled environment of our benchmark set, we show that SFL can effectively be applied in the context of embedded software development in an industrial environment.}
}

@INPROCEEDINGS{debroy2010grouping,
  author={Debroy, Vidroha and Wong, W. Eric and Xu, Xiaofeng and Choi, Byoungju},
  booktitle={2010 10th International Conference on Quality Software}, 
  title={A Grouping-Based Strategy to Improve the Effectiveness of Fault Localization Techniques}, 
  year={2010},
  volume={},
  number={},
  pages={13-22},
  doi={10.1109/QSIC.2010.80}}

@INPROCEEDINGS{jones2002viz,
  author={Jones, J.A. and Harrold, M.J. and Stasko, J.},
  booktitle={Proceedings of the 24th International Conference on Software Engineering. ICSE 2002}, 
  title={Visualization of test information to assist fault localization}, 
  year={2002},
  volume={},
  number={},
  pages={467-477},
  doi={10.1145/581396.581397}}

@inproceedings{Jones2005TarantulaEval,
author = {Jones, James A. and Harrold, Mary Jean},
title = {Empirical Evaluation of the Tarantula Automatic Fault-Localization Technique},
year = {2005},
isbn = {1581139934},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1101908.1101949},
doi = {10.1145/1101908.1101949},
abstract = {The high cost of locating faults in programs has motivated the development of techniques
that assist in fault localization by automating part of the process of searching for
faults. Empirical studies that compare these techniques have reported the relative
effectiveness of four existing techniques on a set of subjects. These studies compare
the rankings that the techniques compute for statements in the subject programs and
the effectiveness of these rankings in locating the faults. However, it is unknown
how these four techniques compare with Tarantula, another existing fault-localization
technique, although this technique also provides a way to rank statements in terms
of their suspiciousness. Thus, we performed a study to compare the Tarantula technique
with the four techniques previously compared. This paper presents our study---it overviews
the Tarantula technique along with the four other techniques studied, describes our
experiment, and reports and discusses the results. Our studies show that, on the same
set of subjects, the Tarantula technique consistently outperforms the other four techniques
in terms of effectiveness in fault localization, and is comparable in efficiency to
the least expensive of the other four techniques.},
booktitle = {Proceedings of the 20th IEEE/ACM International Conference on Automated Software Engineering},
pages = {273-282},
numpages = {10},
keywords = {empirical study, program analysis, fault localization, automated debugging},
location = {Long Beach, CA, USA},
series = {ASE '05}
}

@INPROCEEDINGS{janssen2009zoltar,  author={Janssen, Tom and Abreu, Rui and van Gemund, Arjan J.C.},  booktitle={2009 IEEE/ACM International Conference on Automated Software Engineering},   title={Zoltar: A Toolset for Automatic Fault Localization},   year={2009},  volume={},  number={},  pages={662-664},  doi={10.1109/ASE.2009.27}}

@inproceedings{Abreu2006Ochiai,  author={Abreu, Rui and Zoeteweij, Peter and Van Gemund, Arjan J.c.},  booktitle={2006 12th Pacific Rim International Symposium on Dependable Computing (PRDC'06)},   title={An Evaluation of Similarity Coefficients for Software Fault Localization},   year={2006},  volume={},  number={},  pages={39-46},  doi={10.1109/PRDC.2006.18}}

@inproceedings{sarhan2021charmfl,
  title={{CharmFL: A fault localization tool for Python}},
  author={Sarhan, Qusay Idrees and Szatm{\'a}ri, Attila and T{\'o}th, Rajmond and Besz{\'e}des, Arp{\'a}d},
  booktitle={2021 IEEE 21st International Working Conference on Source Code Analysis and Manipulation (SCAM)},
  pages={114--119},
  year={2021},
  organization={IEEE}
}

@inproceedings{kohn2019error,
author = {Kohn, Tobias},
title = {The Error Behind The Message: Finding the Cause of Error Messages in Python},
year = {2019},
isbn = {9781450358903},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3287324.3287381},
doi = {10.1145/3287324.3287381},
abstract = {The interaction between a novice programmer, and the compiler plays a crucial role in the learning process of the novice programmer. Of particular importance is the compiler's feedback on errors in the program code. Accordingly, compiler error messages are an important and active field of research. Yet, a language that has largely been left out of this discussion so far is Python. We have collected Python programs from high school students taking introductory courses. For each collected erroneous program, we sought to classify the effective error, and assess if the student was able to fix the error. Our study is a precursor to providing improved error messages in Python, and assess their effectiveness. As such, we are eventually interested in finding ways to automatically determine the effective error, so as to base the displayed message on. From our data, we found that a considerable part of students' errors can be attributed to minor mistakes, which can easily be identified and corrected. However, beyond such minor mistakes, a proper error diagnosis might have to be based on a goal/plan analysis of the entire program. Likewise, proper assessment of whether an error has been fixed frequently requires more context than is provided by the program alone.},
booktitle = {Proceedings of the 50th ACM Technical Symposium on Computer Science Education},
pages = {524-530},
numpages = {7},
keywords = {error message, python, cem, compiler errors},
location = {Minneapolis, MN, USA},
series = {SIGCSE '19}
}

@inproceedings{cosman2020pablo,
author = {Cosman, Benjamin and Endres, Madeline and Sakkas, Georgios and Medvinsky, Leon and Yang, Yao-Yuan and Jhala, Ranjit and Chaudhuri, Kamalika and Weimer, Westley},
title = {PABLO: Helping Novices Debug Python Code Through Data-Driven Fault Localization},
year = {2020},
isbn = {9781450367936},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3328778.3366860},
doi = {10.1145/3328778.3366860},
abstract = {As dynamically-typed languages grow in popularity, especially among beginning programmers, there is an increased need to pinpoint their defects. Localization for novice bugs can be ambiguous: not all locations formally implicated are equally useful for beginners. We propose a scalable fault localization approach for dynamic languages that is helpful for debugging and generalizes to handle a wide variety of errors commonly faced by novice programmers. We base our approach on a combination of static, dynamic, and contextual features, guided by machine learning. We evaluate on over 980,000 diverse real user interactions across four years from the popular PythonTutor.com website, which is used both in classes and by non-traditional learners. We find that our approach is scalable, general, and quite accurate: up to 77% of these historical novice users would have been helped by our top-three responses, compared to 45% for the default interpreter. We also conducted a human study: participants preferred our approach to the baseline ($p = 0.018)$, and found it additionally useful for bugs meriting multiple edits.},
booktitle = {Proceedings of the 51st ACM Technical Symposium on Computer Science Education},
pages = {1047-1053},
numpages = {7},
keywords = {fault localization, debugging, machine learning},
location = {Portland, OR, USA},
series = {SIGCSE '20}
}

@ARTICLE{Hailpern2002Debugging,  author={Hailpern, B. and Santhanam, P.},
journal={IBM Systems Journal},   title={Software debugging, testing, and
verification},   year={2002},  volume={41},  number={1},  pages={4-12},
doi={10.1147/sj.411.0004}}

@article{wong2016survey,
  title={A survey on software fault localization},
  author={Wong, W Eric and Gao, Ruizhi and Li, Yihao and Abreu, Rui and Wotawa, Franz},
  journal={IEEE Transactions on Software Engineering},
  volume={42},
  number={8},
  pages={707--740},
  year={2016},
  publisher={IEEE}
}

@article{xu2011ties,
  title={Ties within fault localization rankings: Exposing and addressing the problem},
  author={Xu, Xiaofeng and Debroy, Vidroha and Eric Wong, W and Guo, Donghui},
  journal={International Journal of Software Engineering and Knowledge Engineering},
  volume={21},
  number={06},
  pages={803--827},
  year={2011},
  publisher={World Scientific}
}

@INPROCEEDINGS{xie2010isolating,  author={Xie, Xiaoyuan and Chen, Tsong Yueh and Xu, Baowen},  booktitle={2010 10th International Conference on Quality Software},   title={Isolating Suspiciousness from Spectrum-Based Fault Localization Techniques},   year={2010},  volume={},  number={},  pages={385-392},  doi={10.1109/QSIC.2010.45}}

@article{yoo2014no,
  title={No pot of gold at the end of program spectrum rainbow: Greatest risk evaluation formula does not exist},
  author={Yoo, Shin and Xie, Xiaoyuan and Kuo, Fei-Ching and Chen, Tsong Yueh and Harman, Mark},
  journal={RN},
  volume={14},
  number={14},
  pages={14},
  year={2014},
  publisher={Citeseer}
}

@misc{2021_stackoverflow_survey,
  author = {StackOverflow},
  title = {{2021 StackOverflow Developer Survey}},
  year = 2021,
  url = {https://insights.stackoverflow.com/survey/2021},
}

@misc{coverage_py_website,
  author = {Batchelder, Ned},
  title = {Coverage.py},
  year = 2022,
  url = {https://coverage.readthedocs.io/en/6.3.2/},
}

@inproceedings{Lukasczyk_Pynguin_Automated_Unit_2022,
author = {Lukasczyk, Stephan and Fraser, Gordon},
title = {{Pynguin: Automated unit test generation for Python}},
doi = {10.1145/3510454.3516829},
series = {44th International Conference on Software Engineering Companion (ICSE '22 Companion)},
year = {2022}
}

@misc{the_algorithms_python,
  title = {{TheAlgorithms/Python}},
  year = {2022},
  publisher = {GitHub},
  journal = {GitHub repository},
  howpublished = {\url{https://github.com/TheAlgorithms/Python}}
}

@misc{mutmut,
  title = {boxed/mutmut},
  year = {2022},
  publisher = {GitHub},
  journal = {GitHub repository},
  howpublished = {\url{https://github.com/boxed/mutmut}}
}

@misc{2020_state_of_api_report,
  title = {{2020 State of API Report Postman}},
  publisher = {Postman},
  year = 2020,
  howpublished = {\url{https://www.statista.com/statistics/1083189/worldwide-api-tasks-time-allocation/}},
}

@INPROCEEDINGS{exam_scores,
  author={Wong, Eric and Wei, Tingting and Qi, Yu and Zhao, Lei},
  booktitle={2008 1st International Conference on Software Testing, Verification, and Validation}, 
  title={A Crosstab-based Statistical Method for Effective Fault Localization}, 
  year={2008},
  volume={},
  number={},
  pages={42-51},
  doi={10.1109/ICST.2008.65}}

@ARTICLE{cyclomatic_complexity,  author={McCabe, T.J.},  journal={IEEE
Transactions on Software Engineering},   title={A Complexity Measure},
year={1976},  volume={SE-2},  number={4},  pages={308-320},
doi={10.1109/TSE.1976.233837}}

@article{sarhan2022Challenges,
  title={A Survey of Challenges in Spectrum Based Software Fault Localization},
  author={Sarhan, Qusay I and Besz{\'e}des, {\'A}rp{\'a}d},
  journal={IEEE Access},
  year={2022},
  publisher={IEEE}
}

@inproceedings{Parsai_2020,
	doi = {10.1145/3387940.3392210},
	url = {https://doi.org/10.1145%2F3387940.3392210},
	year = 2020,
	month = {June},
	publisher = {{ACM}},
	author = {Ali Parsai and Serge Demeyer},
	title = {Mutant Density},
	booktitle = {Proceedings of the {IEEE}/{ACM} 42nd International Conference on Software Engineering Workshops}
}